<?php

/**
 * PaymentInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  SSB\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ShopShopBox
 *
 * ShopShopBox API Documentation ## You can filter the results with following filters:  *       'eq' => '=',  *       'ne' => '!=',  *       'like' => 'like',  *        'gt' => '>',  *        'lt' => '<',  *        'ge' => '>=',  *        'le' => '<=', ### example ```php $articles = $client->get('article',['name-eq' => 'mckenzie.com']); ``` Will response with an json-object with all articles named 'mckenzie.com'
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SSB\Api\Model;

use ArrayAccess;
use SSB\Api\ObjectSerializer;

/**
 * PaymentInformation Class Doc Comment
 *
 * @category Class
 * @package  SSB\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentInformation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaymentInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'linkedCodes' => 'string[]',
        'heidelpayShortId' => 'string',
        'holder' => 'string',
        'iban' => 'string',
        'swift' => 'string',
        'paypalOrderRef' => 'string',
        'amazonOrderRef' => 'string',
        'klarnaOrderId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'linkedCodes' => null,
        'heidelpayShortId' => null,
        'holder' => null,
        'iban' => null,
        'swift' => null,
        'paypalOrderRef' => null,
        'amazonOrderRef' => null,
        'klarnaOrderId' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'linkedCodes' => 'linkedCodes',
        'heidelpayShortId' => 'heidelpay_short_id',
        'holder' => 'holder',
        'iban' => 'iban',
        'swift' => 'swift',
        'paypalOrderRef' => 'paypal_order_ref',
        'amazonOrderRef' => 'amazon_order_ref',
        'klarnaOrderId' => 'klarna_order_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'linkedCodes' => 'setLinkedCodes',
        'heidelpayShortId' => 'setHeidelpayShortId',
        'holder' => 'setHolder',
        'iban' => 'setIban',
        'swift' => 'setSwift',
        'paypalOrderRef' => 'setPaypalOrderRef',
        'amazonOrderRef' => 'setAmazonOrderRef',
        'klarnaOrderId' => 'setKlarnaOrderId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'linkedCodes' => 'getLinkedCodes',
        'heidelpayShortId' => 'getHeidelpayShortId',
        'holder' => 'getHolder',
        'iban' => 'getIban',
        'swift' => 'getSwift',
        'paypalOrderRef' => 'getPaypalOrderRef',
        'amazonOrderRef' => 'getAmazonOrderRef',
        'klarnaOrderId' => 'getKlarnaOrderId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['linkedCodes'] = isset($data['linkedCodes']) ? $data['linkedCodes'] : null;
        $this->container['heidelpayShortId'] = isset($data['heidelpayShortId']) ? $data['heidelpayShortId'] : null;
        $this->container['holder'] = isset($data['holder']) ? $data['holder'] : null;
        $this->container['iban'] = isset($data['iban']) ? $data['iban'] : null;
        $this->container['swift'] = isset($data['swift']) ? $data['swift'] : null;
        $this->container['paypalOrderRef'] = isset($data['paypalOrderRef']) ? $data['paypalOrderRef'] : null;
        $this->container['amazonOrderRef'] = isset($data['amazonOrderRef']) ? $data['amazonOrderRef'] : null;
        $this->container['klarnaOrderId'] = isset($data['klarnaOrderId']) ? $data['klarnaOrderId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets linkedCodes
     *
     * @return string[]
     */
    public function getLinkedCodes()
    {
        return $this->container['linkedCodes'];
    }

    /**
     * Sets linkedCodes
     *
     * @param string[] $linkedCodes linkedCodes
     *
     * @return $this
     */
    public function setLinkedCodes($linkedCodes)
    {
        $this->container['linkedCodes'] = $linkedCodes;

        return $this;
    }

    /**
     * Gets heidelpayShortId
     *
     * @return string
     */
    public function getHeidelpayShortId()
    {
        return $this->container['heidelpayShortId'];
    }

    /**
     * Sets heidelpayShortId
     *
     * @param string $heidelpayShortId heidelpayShortId
     *
     * @return $this
     */
    public function setHeidelpayShortId($heidelpayShortId)
    {
        $this->container['heidelpayShortId'] = $heidelpayShortId;

        return $this;
    }

    /**
     * Gets holder
     *
     * @return string
     */
    public function getHolder()
    {
        return $this->container['holder'];
    }

    /**
     * Sets holder
     *
     * @param string $holder holder
     *
     * @return $this
     */
    public function setHolder($holder)
    {
        $this->container['holder'] = $holder;

        return $this;
    }

    /**
     * Gets iban
     *
     * @return string
     */
    public function getIban()
    {
        return $this->container['iban'];
    }

    /**
     * Sets iban
     *
     * @param string $iban iban
     *
     * @return $this
     */
    public function setIban($iban)
    {
        $this->container['iban'] = $iban;

        return $this;
    }

    /**
     * Gets swift
     *
     * @return string
     */
    public function getSwift()
    {
        return $this->container['swift'];
    }

    /**
     * Sets swift
     *
     * @param string $swift swift
     *
     * @return $this
     */
    public function setSwift($swift)
    {
        $this->container['swift'] = $swift;

        return $this;
    }

    /**
     * Gets paypalOrderRef
     *
     * @return string
     */
    public function getPaypalOrderRef()
    {
        return $this->container['paypalOrderRef'];
    }

    /**
     * Sets paypalOrderRef
     *
     * @param string $paypalOrderRef paypalOrderRef
     *
     * @return $this
     */
    public function setPaypalOrderRef($paypalOrderRef)
    {
        $this->container['paypalOrderRef'] = $paypalOrderRef;

        return $this;
    }

    /**
     * Gets amazonOrderRef
     *
     * @return string
     */
    public function getAmazonOrderRef()
    {
        return $this->container['amazonOrderRef'];
    }

    /**
     * Sets amazonOrderRef
     *
     * @param string $amazonOrderRef amazonOrderRef
     *
     * @return $this
     */
    public function setAmazonOrderRef($amazonOrderRef)
    {
        $this->container['amazonOrderRef'] = $amazonOrderRef;

        return $this;
    }

    /**
     * Gets klarnaOrderId
     *
     * @return string
     */
    public function getKlarnaOrderId()
    {
        return $this->container['klarnaOrderId'];
    }

    /**
     * Sets klarnaOrderId
     *
     * @param string $klarnaOrderId klarnaOrderId
     *
     * @return $this
     */
    public function setKlarnaOrderId($klarnaOrderId)
    {
        $this->container['klarnaOrderId'] = $klarnaOrderId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
